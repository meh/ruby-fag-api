#! /usr/bin/env ruby
# encoding: utf-8
require 'optparse'
require 'tempfile'
require 'colorb'
require 'stty'
require 'yaml'
require 'fag'

$options = {}

OptionParser.new do |o|
	$options[:config] = File.expand_path('~/.fagrc')
	$options[:show]   = :home

	$options[:colors] = {
		separator:    'black.bold',
		registered:   'blue.bold',
		unregistered: 'blue',
		tag:          'red',
		id:           'white.bold',
		title:        '',
		content:      '',
		quote:        'green'
	}

	o.on '-C', '--config PATH', 'the configuration file to use' do |value|
		$options[:config] = File.expand_path(value)
	end

	o.on '-U', '--url URL', 'the URL to the zdreN backend' do |value|
		$options[:url] = value
	end

	o.on '-n', '--name NAME', 'the username to log in with' do |value|
		$options[:name] = value
	end

	o.on '-p', '--password PASSWORD', 'the password to log in with' do |value|
		$options[:password] = value
	end

	o.on '-P', '--new-password PASSWORD', 'the new password' do |value|
		$options[:new_password] = value
	end

	o.on '-r', '--register', 'use passed NAME and PASSWORD to signup' do
		$options[:register] = true
	end

	o.on '-a', '--anonymous', 'force anonymous name even if password is given' do
		$options[:anonymous] = true
	end

	o.on '-b', '--bare', 'output without giggles' do
		$options[:bare] = true
	end

	o.on '-d', '--delete WHAT', 'flow id to delete' do |value|
		whole, type, id = value.match(/^(?:(.*?):)?([^:]+)$/).to_a

		$options[:delete]    = type ? type.downcase.to_sym : :flow
		$options[:delete_id] = id.to_i
	end

	o.on '-s', '--show WHAT', 'select what flows to show' do |value|
		$options[:show] = value
	end

	o.on '-m', '--metadata WHAT', 'show metadata of the given item' do |value|
		whole, type, id = value.match(/^(?:(.*?):)?([^:]+)$/).to_a

		$options[:metadata]    = type ? type.downcase.to_sym : :flow
		$options[:metadata_id] = id.to_i
	end

	o.on '-N', '--new', 'create a new flow' do
		$options[:new] = true
	end

	o.on '-f', '--for WHAT', 'for what is the drop' do |value|
		whole, type, id = value.match(/^(?:(.*?):)?([^:]+)$/).to_a

		$options[:for]    = type ? type.downcase.to_sym : :flow
		$options[:for_id] = id.to_i
	end

	o.on '-t', '--title TITLE', 'the title' do |value|
		$options[:title] = value
	end

	o.on '-T', '--tags TAGS', Array, 'the tags to use' do |value|
		$options[:tags] = value
	end

	o.on '-c', '--content CONTENT', 'the content' do |value|
		$options[:content] = value
	end
end.parse!

$config = YAML.parse_file($options[:config]).transform rescue {}

unless $options[:name]
	$options[:name] = $config['name']
end

unless $options[:password]
	$options[:password] = $config['password']
end

unless $options[:url]
	$options[:url] = $config['url'] || 'http://fag2.herokuapp.com'
end

if $options[:anonymous]
	$options[:password] = false
end

if $config['colors']
	$config['colors'].each {|name, value|
		$options[:colors][name.downcase.to_sym] = value
	}
end

module Kernel
	STDIN.extend(STTY)

	def echo (text)
		text.strip.lines.each {|line|
			$stdout.puts line.strip
		}
	end

	def info (text)
		text.strip.lines.each {|line|
			$stdout.puts "#{'*'.green.bold} #{line.strip}"
		}
	end

	def warn (text)
		text.strip.lines.each {|line|
			$stdout.puts "#{'*'.yellow.bold} #{line.strip}"
		}
	end

	def fatal (text)
		text.strip.lines.each {|line|
			$stdout.puts "#{'*'.red} #{line.strip}"
		}
	end

	def added (text)
		text.strip.lines.each {|line|
			$stdout.puts "#{'+'.green} #{line.strip}"
		}
	end

	def deleted (text)
		text.strip.lines.each {|line|
			$stdout.puts "#{'-'.red} #{line.strip}"
		}
	end

	def confirm? (query, default = true)
		$stdout.print "#{??.white.bold} #{query} [#{default ? 'YES/no' : 'yes/NO'}] "

		case $stdin.gets.strip
			when /^(true|y(es)?|1)$/i then true
			when /^(false|no?|0)$/i   then false
			else                           !!default
		end
	end

	def choice (list = nil, query = 'The choice is yours')
		array = if list.is_a?(Array)
			list = Hash[list.each_with_index.map {|v, i|
				[i + 1, v]
			}]

			true
		else
			false
		end

		if list.is_a?(Hash)
			list = Hash[list.map {|i, v| [i.to_s, v] }]
		else
			return nil
		end

		max = list.keys.map {|x|
			x.to_s.size
		}.max

		$stdout.puts "#{query}:"
		list.each {|index, value|
			$stdout.puts "  #{index.rjust(max)}: #{value}"
		}
		$stdout.print "Choice: "

		choice = $stdin.gets.strip

		if list.keys.include?(choice)
			array ? choice.to_i - 1 : choice
		else
			nil
		end
	end

	def escape (what)
		what.to_s.gsub(/[\f\e\b\a]/) { |r| r.inspect[1 .. -2] }
	end

	def length (what)
		escape(what.to_s).length
	end

	def no_colors?
		!!ENV['NO_COLORS']
	end

	def color (what, type)
		result = escape(what.to_s)

		return result unless $options[:colors][type]

		$options[:colors][type].split(?.).each {|name|
			if name =~ /(.*?)\((.*?)\)/
				result = result.__send__ $1, $2.to_i
			else
				result = result.__send__ name
			end
		}

		result
	end

	def color_author (author)
		color(author, author.is_a?(Fag::User) ? :registered : :unregistered)
	end

	def vertical_separator
		no_colors? ? '|' : '│'
	end

	def angle_separator (side, side2)
		if side == :bottom
			if side2 == :left
				no_colors? ? '`' : '└'
			end
		end
	end

	def horizontal_separator
		no_colors? ? '-' : '─'
	end

	def middle_separator (side)
		if side == :top
			no_colors? ? "'" : '┴'
		end
	end

	def horz
		color(horizontal_separator, :separator)
	end

	def vert
		color(vertical_separator, :separator)
	end

	def mid
		color(middle_separator(:top), :separator)
	end

	def truncate (string, length)
		string.sub(/^(.{#{length - 4}})(.*)$/) { $2 ? $1 + '...' : $1 }
	end

	def print_flow (flow, bare = false)
		left_length = STDIN.cols - (length(flow.id) + 2 + length(flow.tags.join(', ')) + 2 + length(flow.author) + 2 + 3)

		unless bare
			puts " #{color(flow.id, :id)} #{vert} #{color_author(flow.author)} #{vert} #{flow.tags.map { |t| color(t, :tag) }.join ', '} #{vert} #{color(truncate(flow.title, left_length), :title)}"
			print horz * (length(flow.id) + 2) + mid
			print horz * (length(flow.author) + 2) + mid
			print horz * (length(flow.tags.join(', ')) + 2) + mid
			print horz * left_length
			puts "\n\n"
		end
	end

	def print_drop (drop, bare = false)
		unless bare
			if drop.relative_id
				left_length = STDIN.cols - (1 + length(drop.author) + (drop.title ? 3 + length(drop.title) : 0))

				print " #{color_author(drop.author)}#{" #{vert} #{color(drop.title, :title)}" if drop.title}"
				print " " * (left_length - length(drop.relative_id) - 3)
				puts "#{vert} #{color(drop.relative_id, :id)} "

				print (horz * (STDIN.cols - length(drop.relative_id) - 3)).black.bold
				print mid
				puts horz * (length(drop.relative_id) + 2)

			else
				puts " #{color_author(drop.author)}#{" #{vert} #{color(drop.title, :title)}" if drop.title}"
				puts horz * STDIN.cols
			end

			puts color(drop.content, :content).gsub(/^>.*$/) { |r| color(r, :quote) }
			puts ""
		else
			puts escape(drop.content)
		end
	end

	def print_error (error)
		if error.is_a?(Fag::HTTP::APIException)
			fatal error.body.downcase
		else
			fatal error.message
		end
	end
end

$session = Fag::Session.new($options[:url])

unless $session.up?
	fatal "#{$session.url} seems to be down"
	exit 99
end

if $options[:register]
	$session.signup($options[:name], $options[:password])

	info 'registered succesfully'

	exit
end

if $options[:password]
	begin
		$session.login($options[:name], $options[:password])
	rescue Fag::HTTP::APIException => e
		if e.code == 403
			fatal 'username or password are wrong'
		else
			fatal 'could not login'
		end

		exit 23
	end
else
	$session.user.name = $options[:name] if $options[:name]
end

if $options[:new_password]
	begin
		$session.user.change_password($options[:new_password])

		info 'changed password successfully'
	rescue Fag::HTTP::APIException => e
		print_error e
	end

	exit
end

if $options[:show] == :home
	$options[:show] = $config['home'] || '*'
end

if !$options[:content] && $options[:new]
	unless ENV['EDITOR']
		fatal 'no editor is set, set the env var EDITOR to your favourite editor'
	end

	temp = Tempfile.new 'fag'
	
	system("$EDITOR #{temp.path}")

	$options[:content] = temp.read
end

begin

if $options[:new]
	if $options[:for] == :flow
		flow = $session.flow($options[:for_id])
		drop = flow.create_drop $options[:content], $options[:title]

		added "drop #{drop.id.to_s.white.bold}"
	else
		flow = $session.create_flow($options[:title], $options[:tags], $options[:content])

		added "flow #{flow.id.to_s.white.bold}"
	end
elsif $options[:delete]
	if $options[:delete] == :drop
		drop = $session.drop($options[:delete_id])
		id   = drop.id

		drop.destroy

		deleted "drop #{id.to_s.white.bold}"
	else
		flow = $session.flow($options[:delete_id])

		if confirm? "delete flow #{color(flow.id, :id)} titled #{color(flow.title, :title)} with tags #{flow.tags.map { |t| color(t, :tag) }.join ', '} by #{color_author(flow.author)}"
			id = flow.id

			flow.destroy

			deleted "flow #{id.to_s.white.bold}"
		end
	end
elsif $options[:metadata]
	require 'ap'

	metadata = if $options[:metadata] == :drop
		$session.drop($options[:metadata_id]).metadata
	elsif $options[:metadata] == :tag
		$session.drop($options[:metadata_id]).metadata
	else
		$session.flow($options[:metadata_id]).metadata
	end

	ap metadata
elsif $options[:show]
	if matches = $options[:show].match(/^(\d+)?(?::(\d+))?$/)
		if matches[1]
			flow = $session.flow(matches[1].to_i)

			unless $options[:bare]
				print_flow(flow)
			end

			if matches[2]
				print_drop(flow.drops[matches[2].to_i - 1], $options[:bare])
			else
				flow.drops.fetch!.each {|drop|
					print_drop(drop, $options[:bare])
				}
			end
		else
			print_drop($session.drop(matches[2].to_i), $options[:bare])
		end
	else
		flows = $session.flows($options[:show])

		if flows.empty?
			warn "no flows match #{$options[:show].to_s.white.bold}"
			
			exit 1
		end

		max_id_length     = flows.max { |a, b| a.id <=> b.id }.id.to_s.length
		max_author_length = length(flows.max { |a, b| length(a.author) <=> length(b.author) }.author)
		max_tags_length   = flows.max { |a, b| a.tags { |t| escape(t) }.join(', ').length <=> b.tags.map { |t| escape(t) }.join(', ').length }.tags.map { |t| escape(t) }.join(', ').length

		flows.each {|flow|
			print ' '

			print ' ' * (max_id_length - flow.id.to_s.length)
			print color(flow.id, :id)

			print " #{vert} "

			print color_author(flow.author)
			print ' ' * (max_author_length - length(flow.author))

			print " #{vert} "

			print flow.tags.map { |t| color(t, :tag) }.join ', '
			print ' ' * (max_tags_length - flow.tags.join(', ').length)

			print " #{vert} "

			print color(flow.title, :title)

			puts
		}
	end
end

rescue Exception => e
	print_error e
end
